#!/usr/bin/perl

=head1 NAME

check-io-util - Plugin to check %util of iostat.

=head1 SYNOPSIS

    check-io-util [ OPTIONS ]

    check-io-util --help

=head1 REPORTING BUGS

Please report all bugs to <hallo(at)dominicpratt.de>.

=head1 AUTHOR

Dominic Pratt <hallo(at)dominicpratt.de>.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

my $plugin = Bloonix::Plugin->new(version => "0.1");

$plugin->example(
    description => "Parse the output of %util in iostat -x.",
    arguments => [ disk => "sda" ]
);

$plugin->add_option(
    name => "Device name",
    option => "device",
    value => "device",
    multiple => 1,
    mandatory => 1,
    regex => qr/^[a-zA-Z_0-9]+\z/,
    value_type => "string",
    description => "This is the device name to check."
);

my $opt = $plugin->parse_options;

my $iostat = qx{which iostat};
chomp $iostat;

if (!$iostat || !-x $iostat) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "command 'iostat' not found"
    );
}

my @output = qx{$iostat -d -x};
my $util = { map { $_ => undef } @{$opt->{device}} };

foreach my $line (@output) {
    my @parts = split /\s+/, $line;
    next unless @parts == 14;
    if (exists $util->{$parts[0]}) {
        $util->{$parts[0]} = $parts[13];
    }
}

foreach my $dev (@{$opt->{device}}) {
    if (!defined $util->{$dev}) {
        $plugin->exit(
            status => "UNKNOWN",
            message => "device $dev' not found"
        );
    }
}

my $message = "%util: " . join("; ", map { "$_: $util->{$_}" } keys %$util);

$plugin->exit(
    status => "OK",
    message => $message,
    stats => $util
);

